# -*- coding: utf-8 -*-
"""
Created on Mon Feb 15 13:31:34 2016

@author: k
"""



class MGFfromFMSConvertGUI(object):
    """
    stores the elements in mgf format. It seems mgf file generated by different programs
    are a little different, here this one is only for mgf files generated by MSConvertGUI.
    The data looks like:
    
    BEGIN IONS
    TITLE=1402_PGRP1_40hr.2.2.1 File:"1402_PGRP1_40hr.RAW", NativeID:"controllerType=0 controllerNumber=1 scan=2"
    RTINSECONDS=1.1621
    PEPMASS=149.023162841797 230126.4375
    CHARGE=1+
    56.96076965 6.3992462158
    64.98370361 4.6338524818
    ...
    151.1764374 26.6350517273
    END IONS
    
    MGFfromFMSConvertGUI contains five elements: title (TITLE), retention time (RTINSECONDS), pepmass (PEPMASS),
    charge (CHARGE), msms (the list of tuple, with m/z and intensity)
    Do note that pepmass is a tuple, with m/z and its intensity. msms is a list.
    """
    def __init__(self,title=None,rt=None, pepmass = None,charge=None,msms=None):
        self.title = title
        self.rt =rt
        self.pepmass = pepmass
        self.charge = charge
        self.msms = msms
    def __str__(self):
        """
        return a string about the element
        """
        return "title is: " + self.title + "\nretention time is: "+str(self.rt) +\
        "\npepmass is: "+str(self.pepmass)+"\ncharge is: " +str(self.charge) + \
        "\nnumber of msms is: "+str(len(self.msms))
    def fullinfo(self):
        """
        return full information of the class, the same as in the mgf file.
        """
        mgfinfo = "BEGIN IONS\n"
        mgfinfo = mgfinfo+self.title+"\n"
        mgfinfo = mgfinfo + "RTINSECONDS="+str(self.rt)+"\n"
        mgfinfo = mgfinfo + "PEPMASS="+str(self.pepmass[0])+" "+str(self.pepmass[1])+"\n"
        mgfinfo = mgfinfo + "CHARGE=" + str(self.charge)+"+\n"
        for ele in self.msms:
            mgfinfo = mgfinfo + str(ele[0])+" "+str(ele[1])+"\n"
        mgfinfo = mgfinfo +"END IONS\n"
        return mgfinfo
    def msmsvalues(self):
        """
        return a list of msms m/z's
        """
        msmsva =[]
        for ele in self.msms:
            msmsva.append(ele[0])
        return msmsva
    def msmsintensity(self):
        """
        return a list of msms intensities
        """
        msmsin =[]
        for ele in self.msms:
            msmsin.append(ele[1])
        return msmsin



def readMGFfile2list(filename):
    """
    Given a filename of mgf file, return a list of class MGFfromFMSConvertGUI
    """
    fo = open(filename,"r")
    mytext = fo.read().split("\n")[:-1]
    mgfs = []
    import re
    i = 0 # position of "BEGIN IONS"
    while i < len(mytext):
        if mytext[i] == "BEGIN IONS":
            j = 0   #i+j is the position of "END IONS"
            while mytext[i+j] != "END IONS":
                j = j+1
            if j<5:
                print("incomplete information from line: ",i)
                i = i+j+1
            else:
                mgf = MGFfromFMSConvertGUI()
                if mytext[i+1][:6] == "TITLE=":
                    mgf.title = mytext[i+1]
                if mytext[i+2][:12] == "RTINSECONDS=":
                    mgf.rt = float(mytext[i+2][12:])
                if mytext[i+3][:8] == "PEPMASS=":
                    if " " in mytext[i+3][8:]:
                        mgf.pepmass = (float(mytext[i+3][8:].split(" ")[0]),float(mytext[i+3][8:].split(" ")[1]))
                    else:
                        mgf.pepmass = (float(mytext[i+3][8:]),1)
                if mytext[i+4][:7] == "CHARGE=":
                    mgf.charge = int(mytext[i+4][7]) # max change is 9, only positive values.
                mgf.msms=[]
                for k in range(i+5,i+j):
                    if re.match("^[0-9 \.]*$",mytext[k]):
                        mgf.msms.append((float((mytext[k].split(" ")[0])),float(mytext[k].split(" ")[1])))
                    else:
                        print("problem with line ", k)
                        break
                mgfs.append(mgf)
                i = i+j+1
        else:
            i = i+1
    return mgfs

def readMGFfilesPepmass(filename):
    """
    Given a file name of mgf file, return a list of (pepmass, intensity). if intensity not exist, set it as 1
    """
    mytext = open(filename,"r").read().split("\n")[:-1]
    peps =[]
    for i in range(len(mytext)):
        if mytext[i][:8] == "PEPMASS=":
            if " " in mytext[i][8:]:
                peps.append((float(mytext[i][8:].split(" ")[0]),float(mytext[i][8:].split(" ")[1])))
            else:
                peps.append((float(mytext[i][8:]),1))
    return peps


folder = "E:\\Lab\\works\\20160212AliciaMSMS\\"
import glob
myfiles = glob.glob(folder+"*.mgf")
myfiles = myfiles[0:1]+myfiles[2:]+myfiles[1:2]
Afiles = {}
Afiles["1"] = myfiles[0]
Afiles["D"] = myfiles[1]
Afiles["L"] = myfiles[2]
Afiles["1D4"] = myfiles[3]
Afiles["1L4"] = myfiles[4]
Afiles["1D7"] = myfiles[5]
Afiles["1L7"] = myfiles[6]
Afiles["2"] = myfiles[7]
Afiles["2D"] = myfiles[8]
Afiles["2L"] = myfiles[9]

Apeps ={} # read mgf files and store the pepmass of in the Apep dictionary
for key in Afiles:
    Apeps[key] = readMGFfilesPepmass(Afiles[key])

AMGFs={} # read mgf files and store all information from the mgf file in class MGFfromFMSConvertGUI format
for key in Afiles:
    AMGFs[key] = readMGFfile2list(Afiles[key])

def AMGFsSelectPepmass(AMGFs, target_pepmass, min_intensity = 1e6, keys=None, error = 0.1, outfile = None):
    """
    only works for the dictionary AMGFs here.
    target_pepmass is the target m/z. if keys is not provided, search the whole dictionary.
    if outfile is not provided, do not output a file.
    return a list of class MGFfromFMSConvertGUI
    the default error tolerance is 0.1
    keys is a list of keys in AMGFs, like ["1","2","1D4"]
    min_intensity to return the value is 1e6
    """
    if keys == None:
        keys = list(AMGFs.keys())
    mgflist=[]
    for key in keys:
        for ele in AMGFs[key]:
            if ele.pepmass[0] - target_pepmass < error and -error < ele.pepmass[0] - target_pepmass and ele.pepmass[1] > min_intensity:
                mgflist.append(ele)
    if outfile != None:
        fo = open(outfile,"w")
        for ele in mgflist:
            fo.write(ele.fullinfo())
        fo.close()
    return mgflist


def pepmassFilter(mylist, min_intensity = 0):
    """
    given a list of pepmass, return a list of pepmass with intensity greater than min_intensity
    """
    mynew =[]
    for ele in mylist:
        if ele[1] > min_intensity:
            mynew.append(ele)
    return mynew


targetmz = 806.38903856722 #mz of DAP-PG
standard_mgf = AMGFsSelectPepmass(AMGFs,targetmz,1e6,["D"])
standardmsmslist = standard_mgf[0].msmsvalues()
standardmsmslist.sort()

def msmslistCompare(lis1,lis2,error = 0.5):
    """
    given two list of msmsvalues, return the number of common values, with the error tolerance default of 0.05
    and return a list of common values based on lis1
    >>>lis1 = [1.1, 1.2, 1.5]
    >>>lis2 = [1.14, 1.8, 1.46]
    >>>msmslistCompare(lis1,lis2)
    >>>(2,[1.1, 1.5])
    """
    if len(lis2) == 0:
        return 0, []
    if len(lis1) == 0:
        return 0, []
    count = 0
    commonlis = []
    for ele2 in lis2:
        for ele1 in lis1:
            if abs(ele2 - ele1) < error:
                count += 1
                commonlis.append(ele1)
    return count, commonlis



def plotselected(key,common_ratio = 4):
    """
    key is a key in AMGFs, print selected mgf scans based on the paramters in this function
    """
    selected=[]
    for ele in AMGFs[key]:
    #    if ele.pepmass[0] -targetmz < -0.5 and abs(ele.pepmass[0] - 492) < 5 or abs(ele.pepmass[0] - 332) < 5: #select molecular mass of targeted small fragments
        if ele.pepmass[0] -targetmz < -0.5 and max(ele.msmsvalues()+[0]) <800: # +[0] is because some mgf scans have no msms data. rare.
            stargets = msmslistCompare(standardmsmslist,ele.msmsvalues(),)
            if stargets[0] > len(standardmsmslist)/common_ratio: # how many 2nd mz can be found
               selected.append(ele)
    print(len(selected))
    
    import numpy as np
    import matplotlib.pyplot as plt
    #from matplotlib.backends.backend_pdf import PdfPages
    #pp = PdfPages("AliciaDAP.pdf")
    plotnumber = len(selected)+1
    plt.rcParams["figure.figsize"] = (12.0,3*plotnumber)
    count = 1
    fig1 = plt.subplot(plotnumber,1,count)
    plt.vlines(standard_mgf[0].msmsvalues(),0,standard_mgf[0].msmsintensity(),color="b")
    plt.ylim(ymin = 10,ymax = 1e5)
    plt.yscale("log")
    count += 1
    plt.xlabel("DAP-PG")
    for ele in selected:
        fig = plt.subplot(plotnumber,1,count,sharex = fig1, sharey = fig1)
        plt.vlines(ele.msmsvalues(),0,ele.msmsintensity(),color = "b")
        plt.xlabel(ele.title.split("NativeID:")[1]+" pepmass"+str(ele.pepmass)+" rtmin"+str(ele.rt/60))
        count += 1
        plt.yscale("log")
        plt.ylim(ymin = 10,ymax = 1e5)
    plt.savefig("20160218Alicia_"+key+str(common_ratio)+".pdf")




def MGFsUnique(mgfs1,mgfs2,error = 0.3):
    """
    for mgf scans in mgfs1 (a list of mgf scans), find those scans that do not exist in mgfs2
    this is determined by pepmass difference and msmsvalues, 1/4 of msmsvalues in scans of mgfs1 need to be identified.
    """
    mgfsUniquelis = []
    error = 0.3
    for ele1 in mgfs1:
        for ele2 in mgfs2:
            common = False
            if abs(ele1.pepmass[0] - ele1.pepmass[0]) < error and abs(ele1.rt - ele2.rt) < 300:
                count, commonlis = msmslistCompare(ele1.msmsvalues(),ele2.msmsvalues())
                if count > len(ele.msmsvalues())/2:
                    common = True
                    break
        if common == False:
            mgfsUniquelis.append(ele1)
    return mgfsUniquelis

AMGFs["1D4-1-D"] = MGFsUnique(AMGFs["1D4"], AMGFs["1"]+AMGFs["D"])
AMGFs["1D7-1-D"] = MGFsUnique(AMGFs["1D7"], AMGFs["1"]+AMGFs["D"])
plotselected("1D4-1-D")
plotselected("1D7-1-D")
plotselected("1D4")
plotselected("1D7")
plotselected("1")
plotselected("D")
plotselected("1D4-1-D",6)
plotselected("1D7-1-D",6)
plotselected("1D4-1-D",10)
plotselected("1D7-1-D",10)

plotselected("1D4",10);
plotselected("1D7",10);


#templist =[]
#for ele in AMGFs["2D"]:
#    if abs(ele.pepmass[0]-531.28853668031) < 0.5:
#        templist.append(ele)
#        print(ele.pepmass)
#print(len(templist))
templist = []
for ele in AMGFs["D"]:
    tempcount = msmslistCompare(ele.msmsvalues(),standardmsmslist)
    if tempcount[0] >57:
        print(ele.title)
print(len(templist))
templist.sort(reverse=True)
print(templist[:20])

for ele in templist:
    print(msmslistCompare(ele.msmsvalues(),standardmsmslist)[0])
AMGFs["temp"] = templist
plotselected("temp",100)

AMGFs["2D-2-D"] = MGFsUnique(AMGFs["2D"], AMGFs["2"]+AMGFs["D"])
plotselected("2D-2-D",10)


import numpy as np
import matplotlib.pyplot as plt
#from matplotlib.backends.backend_pdf import PdfPages
#pp = PdfPages("AliciaDAP.pdf")
plotnumber = len(selected)+1
plt.rcParams["figure.figsize"] = (12.0,3*plotnumber)
count = 1
fig1 = plt.subplot(plotnumber,1,count)
plt.vlines(standard_mgf[0].msmsvalues(),0,standard_mgf[0].msmsintensity(),color="b")
plt.ylim(ymin = 10,ymax = 1e5)
plt.yscale("log")
count += 1
plt.xlabel("DAP-PG")
for ele in selected:
    fig = plt.subplot(plotnumber,1,count,sharex = fig1, sharey = fig1)
    plt.vlines(ele.msmsvalues(),0,ele.msmsintensity(),color = "b")
    plt.xlabel(ele.title.split("NativeID:")[1]+" pepmass"+str(ele.pepmass)+" rtmin"+str(ele.rt/60))
    count += 1
    plt.yscale("log")
    plt.ylim(ymin = 10,ymax = 1e5)
fig = plt.savefig("testD.pdf")


    

#filename ="1-1402_PGRP1_40hr.mgf"
#mylist = readMGFfile2list(folder+filename)            
#print(len(mylist))
#a = mylist[0]
#print(a)
#

def plotpepmass(pepmassList,filename = "pepmass.pdf",size = (12.0,6.0)):
    """
    Given a pepmass list,  Intensity as the y axis, m/z is the x axis
    """
    import numpy as np
    import matplotlib.pyplot as plt
    plt.rcParams["figure.figsize"] = size
    mz =[]
    mzi = []
    for pepmass in pepmassList:
        mz.append(pepmass[0])
        mzi.append(pepmass[1])
    mzi = np.array(mzi)
    #mzi = np.log10(mzi)
    plt.vlines(mz,0,mzi)
    plt.ylim(ymin = int("1"+(len(str(int(min(mzi))))-1)*"0"),ymax = int("1"+(len(str(int(max(mzi)))))*"0"))
    plt.yscale("log")
    plt.savefig(filename)

plotpepmass(pepmassFilter(Apeps["1"],1e7),"1.pdf")
plotpepmass(pepmassFilter(Apeps["2"],1e7),"2.pdf")


import numpy as np
import matplotlib.pylab as plt
min_intensity = 1e6
#plt.rcParams["figure.figsize"] = (12.0,6.0)
plt.rcParams["figure.figsize"] = (24.0,20.0)


fig1 = plt.subplot(10,1,1)
pepmassList = pepmassFilter(Apeps["1"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "r")
plt.ylabel("PGRP1")
fig1.xaxis(visible = False)

fig2 =plt.subplot(10,1,2,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["D"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "g")
plt.ylabel("DAP-PG")

fig3 =plt.subplot(10,1,3,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["1D4"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "b")
plt.ylabel("PGRP1+DAP-PG 40h")

fig4 =plt.subplot(10,1,4,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["1D7"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "c")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP1+DAP-PG 70h")

fig5 =plt.subplot(10,1,5,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["L"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "m")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("LYS-PG")

fig6 =plt.subplot(10,1,6,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["1L4"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "y")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP1+LYS-PG 40h")

fig7 =plt.subplot(10,1,7,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["1L7"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "b")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP1+LYS-PG 70h")

fig8 =plt.subplot(10,1,8,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["2"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "g")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP2")


fig9 =plt.subplot(10,1,9,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["2D"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "r")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP2+DAP-PG")


fig10 =plt.subplot(10,1,10,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["2D"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "c")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP2+LYS-PG")

plt.savefig("Alicia10pepmass.pdf")









import numpy as np
import matplotlib.pylab as plt
min_intensity = 1e6
plt.rcParams = plt.rcParamsDefault
plt.rcParams["figure.figsize"] = (14.0,14.0)


fig1 = plt.subplot(711)
pepmassList = pepmassFilter(Apeps["1"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "r")
plt.ylabel("PGRP1")

fig2 =plt.subplot(712,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["D"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "g")
plt.ylabel("DAP-PG")

fig3 =plt.subplot(713,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["1D4"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "b")
plt.ylabel("PGRP1+DAP-PG 40h")

fig4 =plt.subplot(714,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["1D7"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "c")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP1+DAP-PG 70h")

fig5 =plt.subplot(715,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["L"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "m")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("LYS-PG")

fig6 =plt.subplot(716,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["1L4"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "y")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP1+LYS-PG 40h")

fig7 =plt.subplot(717,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["1L7"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "b")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP1+LYS-PG 70h")

plt.savefig("Alicia7pepmassPGRP1.pdf")








import numpy as np
import matplotlib.pylab as plt
min_intensity = 1e6
#plt.rcParams["figure.figsize"] = (12.0,6.0)
plt.rcParams["figure.figsize"] = (24.0,20.0)


fig2 =plt.subplot(5,1,1,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["D"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "g")
plt.ylabel("DAP-PG")


fig5 =plt.subplot(5,1,2,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["L"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "m")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("LYS-PG")

#min_intensity = 1e7
fig8 =plt.subplot(5,1,3,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["2"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "g")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP2")


fig9 =plt.subplot(5,1,4,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["2D"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "r")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e8)
plt.ylabel("PGRP2+DAP-PG")


fig10 =plt.subplot(5,1,5,sharex = fig1, sharey = fig1)
pepmassList = pepmassFilter(Apeps["2D"],min_intensity)
mz = []
mzi =[]
for pepmass in pepmassList:
    mz.append(pepmass[0])
    mzi.append(pepmass[1])
mzi = np.array(mzi)
plt.vlines(mz,0,mzi,color = "c")
plt.yscale("log")
plt.ylim(ymin = min_intensity,ymax = 1e9)
plt.ylabel("PGRP2+LYS-PG")
plt.savefig("Alicia5pepmassPGRP2.png")


plt.savefig("Alicia5pepmassPGRP2.pdf")

#plotpepmass(mylist)
#import matplotlib.pyplot as plt
#plt.rcParams["figure.figsize"] = [32.0,12.0]
#mgflist = mylist
#import numpy as np
#mz =[]
#mzi = []
#for mgf in mgflist:
#    if mgf.pepmass[1] >= 1:
#        mz.append(mgf.pepmass[0])
#        mzi.append(mgf.pepmass[1])
#mzi = np.array(mzi)
#plt.vlines(mz,0,mzi)
#plt.ylim(ymin = 10000)
#plt.yscale("log")
#plt.savefig("test3.pdf")

for ele in Apeps["1D7"]:
    if ele[0] - 332 <2 and -2 < ele[0] - 332 and ele[1]>1e6:
        print(ele)




#20160222
#filter all possible possible cutting products of MPP-DAP
mpp_products=["C32H55N9O15","C29H49N7O15","C3H8N2O","C26H44N6O14","C6H13N3O2","C19H32N4O11",\
"C13H25N5O5","C14H24N2O9","C18H33N7O7","C11H19N1O8","C21H38N8O8"]
# a list of all possible molecules from MPP-DAP, the first one is MPP-DAP itself
def listmoleculemz(moleculelist,ioncharge = 1):
    """
    given a list of molecules, return list of m/z's.
    """
    from pyteomics import mass
    mzlist =[]
    for ele in moleculelist:
        mz = mass.calculate_mass(formula = ele, charge = ioncharge)
        mzlist.append(mz)
    return mzlist
mpp_mzs = listmoleculemz(mpp_products)
#targetmz = 806.38903856722 #mz of DAP-PG

mpp_mz_mgflist_01 =[]
for ele in mpp_mzs:
    _to_use = AMGFsSelectPepmass(AMGFs, ele, min_intensity = 0, keys=None, error = 0.05, outfile = None)
    _to_use[:] = [ item for item in _to_use[:] if item.charge == 1]
    print(len(_to_use))
    mpp_mz_mgflist_01.append(_to_use)
# for each mz in mpp_mzs, get all cans with similar mz. error = 0.01

def plot_mgfscans(mgfscans,outfile = "plot_mgfscans.pdf"):
    """
    given many mgfscans, plot msms of them
    """
    import matplotlib.pyplot as plt
    pltnumber = len(mgfscans)
    plt.rcParams["figure.figsize"] = [12.0,3.0*pltnumber]
    for num in range(len(mgfscans)):
        ele = mgfscans[num]
        plt.subplot(pltnumber,1,num+1)
        plt.vlines(mgfscans[num].msmsvalues(),0,mgfscans[num].msmsintensity())
        plt.xlabel(str(num)+" "+mgfscans[num].title.split("File:")[0]+\
        " pepmass "+str(ele.pepmass[0])[:8]+" " +str(ele.pepmass[1])+" rtmin"+str(ele.rt/60)[:6]+" charge:"+str(ele.charge))
#        plt.yscale("log")
        plt.ylim(ymin = 1)
        plt.xlim(xmin = 200,xmax = 900)
    plt.savefig(outfile)

import itertools
mpp_mz_mgflist_01all = list(itertools.chain.from_iterable(mpp_mz_mgflist_01))
mpp_mz_mgflist_01all[:] = [ item for item in mpp_mz_mgflist_01all[:] if item.charge == 1]
print(len(mpp_mz_mgflist_01all))
        
#plot_mgfscans(mpp_mz_mgflist_01all,"plot_mgfscans_log.pdf"); 
plot_mgfscans(mpp_mz_mgflist_01all,"plot_mgfscans_ori.pdf"); 

standardmsmslist = mpp_mz_mgflist_01all[12].msmsvalues()
msmslistCompare(standardmsmslist, mpp_mz_mgflist_01all[17].msmsvalues())
msmslistCompare(standardmsmslist, mpp_mz_mgflist_01all[18].msmsvalues())
msmslistCompare(standardmsmslist, mpp_mz_mgflist_01all[19].msmsvalues())
msmslistCompare(standardmsmslist, mpp_mz_mgflist_01all[20].msmsvalues())

fo = open("mgf_final_interested.mgf","w")
for ele in mpp_mz_mgflist_01all:
    fo.write(ele.fullinfo())
fo.close()

for ele in mpp_mz_mgflist_01[1]:
    print(ele)

import matplotlib.pyplot as plt
plt.rcParams = plt.rcParamsDefault
plt.rcParams["figure.figsize"] = [20,6.0]
for num in range(len(mpp_mz_mgflist_01)):
    for mgfscan in mpp_mz_mgflist_01[num]:
        plt.vlines(standardmsmslist,0,100,color = (0,1,0,0.5))
        plt.vlines(mgfscan.msmsvalues(),0,mgfscan.msmsintensity(),color = (0,0,1.0,0.8),zorder=99)
    #    plt.yscale("log")
        plt.ylim(ymin = 1)
        ele = mgfscan
        counts = msmslistCompare(standardmsmslist,mgfscan.msmsvalues(),0.2)
        plt.title("Number of msms the same as standard (error 0.2): "+str(counts[0]))
        plt.plot(counts[1],[0 for _ in range(len(counts[1]))],"r,",clip_on=False,zorder=100)
        plt.xlabel(mgfscan.title.split("File:")[0]+\
        " pepmass "+str(ele.pepmass[0])[:8]+" " +str(ele.pepmass[1])+" rtmin"+str(ele.rt/60)[:6]+" charge:"+str(ele.charge))
        plt.savefig("0223"+mpp_products[num]+"rt"+str(int(mgfscan.rt))+" "+mgfscan.title.split("File:")[0].split("=")[1]+".pdf")
        plt.close()




"""
deal with result of lys-PG
"""
lys_products=[""]
#standard peak in file LYS_PG 1321
for num in range(len(AMGFs["L"])):
    ele  = AMGFs["L"][num]
    if abs(ele.pepmass[0]-762.3992) <0.01:
        print(ele,num)
print(AMGFs["L"][524])

lysstandardmsms = AMGFs["L"][524]

for num in range(len(AMGFs["1L7"])):
    ele  = AMGFs["L"][num]
    if abs(ele.pepmass[0]-365.1514) <0.02:
        print(ele,num)




"""
plot together with standard scan 1525, 1L7
"""
for ele in AMGFs["1L7"]:
    if "scan=1525" in ele.title:
        scan1525 = ele
        break
scan_st = standard_mgf[0]
import matplotlib.pyplot as plt
plt.vlines(scan1525.msmsvalues(),0,scan1525.msmsintensity(),color = (0,1,0,0.8),zorder=10)
plt.vlines(scan_st.msmsvalues(),0,scan_st.msmsintensity(),color = (1,0,0,0.8),zorder=11)
count = msmslistCompare(scan_st.msmsvalues(),scan1525.msmsvalues())
plt.yscale("log")
plt.ylim(ymin=1)
plt.savefig("scan1525.png",dpi=300)
plt.close()
print(count[0])

#20190114
f1 = r"C:\Users\ATPs\OneDrive\Lab\data\ppt\20170818LabMeeting PGRP13 cutting PG\DAP_lysozyme.featureXML"
f2 = r"C:\Users\ATPs\OneDrive\Lab\data\ppt\20170818LabMeeting PGRP13 cutting PG\lys_PG.featureXML"
f3 = r"C:\Users\ATPs\OneDrive\Lab\data\ppt\20170818LabMeeting PGRP13 cutting PG\PGRP1_DAP_Zn.featureXML"
f4 = r"C:\Users\ATPs\OneDrive\Lab\data\ppt\20170818LabMeeting PGRP13 cutting PG\PGRP1_Lys_Zn.featureXML"
files = [f1,f2,f3,f4]

from bs4 import BeautifulSoup
def processOne(f1):
    soup = BeautifulSoup(open(f1).read(),'lxml')
    features = soup.find_all(name='feature')
    feature = features[0]
    fout = open(f1.replace('.featureXML','.txt'),'w')
    for feature in features:
        rt = feature.find(name='position',dim='0').text
        mz = feature.find(name='position',dim='1').text
        charge = feature.find(name='charge').text
        intensity = feature.find(name='intensity').text
        fout.write('\t'.join([rt,mz,charge,intensity])+'\n')
    fout.close()
for f1 in files:
    processOne(f1)

processOne(r"E:\Insects\ManducaSexta\20160212AliciaMSMS\RAW\1-1402_PGRP1_40hr.PeakPickerHiRes.FeatureFinderCentroided.featureXML")


cmd = r'''
"C:\P\OpenMS-2.4.0\bin\FileFilter.exe" -in "E:\Insects\ManducaSexta\20160212AliciaMSMS\RAW\{file}.mzML" -out "E:\Insects\ManducaSexta\20160212AliciaMSMS\RAW\{file}.MS1.mzML"  -peak_options:level 1

"C:\P\OpenMS-2.4.0\bin\PeakPickerHiRes.exe" -in "E:\Insects\ManducaSexta\20160212AliciaMSMS\RAW\{file}.MS1.mzML" -out "E:\Insects\ManducaSexta\20160212AliciaMSMS\RAW\{file}.PeakPickerHiRes.mzML" -threads 4  -algorithm:ms_levels 1  -algorithm:SignalToNoise:bin_count 3 -algorithm:SignalToNoise:min_required_elements 7 -algorithm:signal_to_noise 0

"C:\P\OpenMS-2.4.0\bin\FeatureFinderCentroided.exe" -in "E:\Insects\ManducaSexta\20160212AliciaMSMS\RAW\{file}.PeakPickerHiRes.mzML" -out "E:\Insects\ManducaSexta\20160212AliciaMSMS\RAW\{file}.PeakPickerHiRes.FeatureFinderCentroided.featureXML" -threads 4 -algorithm:isotopic_pattern:charge_high 2 -algorithm:fit:max_iterations 1000 -algorithm:mass_trace:mz_tolerance 0.004  -algorithm:mass_trace:min_spectra 10 -algorithm:mass_trace:max_missing 0 -algorithm:feature:min_rt_span 0.1 -algorithm:feature:max_rt_span 10000000 -algorithm:feature:rt_shape symmetric -algorithm:isotopic_pattern:mz_tolerance 0.02 -algorithm:isotopic_pattern:optional_fit_improvement 100

'''
files = '''2-1402_DAP_PG
3-1402_LYS_PG
4-1402_PGRP1_DAP_PG_40hr
5-1402_PGRP1_LYS_PG_40hr
6-1402_PGRP1_DAP_PG_70hr
7-1402_PGRP1_LYS_PG_70hr
8-1402_PGRP2_zinc_40hr
9-1402_PRGP2_MPP_DAP_zinc_40hrs
10-1402_PGRP2_MPP_LYS_zinc_40hr
'''.split()

import os
for file in files:
    print(cmd.format(file=file))

folder = r"E:\Insects\ManducaSexta\2017Mansi\features"
import glob
files = glob.glob(folder+'\\*.featureXML')

for f in files:
    processOne(f)
